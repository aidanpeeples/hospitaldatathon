# Sample participant submission for testing
from flask import Flask, jsonify, request
# import tensorflow as tf
import pandas as pd
import random
import joblib

app = Flask(__name__)


class Solution:
    def __init__(self):
        #Initialize any global variables here
        # self.model = tf.keras.models.load_model('example.h5')
        self.loaded_model = joblib.load('svm_model.pkl')

        pass

    def calculate_death_prob(self, timeknown, cost, reflex, sex, blood, bloodchem1, bloodchem2, temperature, race,
                             heart, psych1, glucose, psych2, dose, psych3, bp, bloodchem3, confidence, bloodchem4,
                             comorbidity, totalcost, breathing, age, sleep, dnr, bloodchem5, pdeath, meals, pain,
                             primary, psych4, disability, administratorcost, urine, diabetes, income, extraprimary,
                             bloodchem6, education, psych5, psych6, information, cancer):
        
        values = [timeknown, reflex, sex, blood, bloodchem1, bloodchem2, temperature,
                             heart, psych1, glucose, psych2, dose, psych3, bp, bloodchem3, confidence, bloodchem4,
                             comorbidity, breathing, age, sleep, dnr, bloodchem5, pdeath, meals, pain,
                             psych4, administratorcost, urine, diabetes,
                             bloodchem6, education, psych5, psych6, information, cancer]
        labels = ['timeknown', 'reflex', 'sex', 'blood', 'bloodchem1', 'bloodchem2', 'temperature', 'heart',
          'psych1', 'glucose', 'psych2', 'dose', 'psych3', 'bp', 'bloodchem3', 'confidence', 'bloodchem4',
          'comorbidity', 'breathing', 'age', 'sleep', 'dnr', 'bloodchem5', 'pdeath', 'meals', 'pain',
          'psych4', 'administratorcost', 'urine', 'diabetes', 'bloodchem6', 'education', 'psych5',
          'psych6', 'information', 'cancer']
        df = dict()
        for i, label in enumerate(labels):
            df[label] = [values[i]]
        df = pd.DataFrame(df)

        
        df.replace('yes', 1, inplace=True)
        df.replace('no', 0, inplace=True)

        df.replace('male', 1, inplace=True)
        df.replace('M', 1, inplace=True)
        df.replace('Male', 1, inplace=True)
        df.replace('Female', 0, inplace=True)
        df.replace('F', 0, inplace=True)
        df.replace('female', 0, inplace=True)

        df.replace('dnr', 1, inplace=True)
        df.replace('dnr before sadm', 1, inplace=True)
        df.replace('dnr after sadm', 1, inplace=True)
        df.replace('no dnr', 1, inplace=True)

        df.replace('metastatic', 1, inplace=True)
        df.replace('', 0, inplace=True)
        df.replace('nan', 0, inplace=True)
        df.fillna(0, inplace=True)
        print(df)
        
        """
        This function should return your final prediction!
        """
        prediction = self.loaded_model.predict(df)
        print(prediction)
        return prediction[0]



   # return 0


# BOILERPLATE
@app.route("/death_probability", methods=["POST"])
def q1():
    solution = Solution()
    data = request.get_json()
    return {
        "probability": solution.calculate_death_prob(data['timeknown'], data['cost'], data['reflex'], data['sex'], data['blood'],
                                            data['bloodchem1'], data['bloodchem2'], data['temperature'], data['race'],
                                            data['heart'], data['psych1'], data['glucose'], data['psych2'],
                                            data['dose'], data['psych3'], data['bp'], data['bloodchem3'],
                                            data['confidence'], data['bloodchem4'], data['comorbidity'],
                                            data['totalcost'], data['breathing'], data['age'], data['sleep'],
                                            data['dnr'], data['bloodchem5'], data['pdeath'], data['meals'],
                                            data['pain'], data['primary'], data['psych4'], data['disability'],
                                            data['administratorcost'], data['urine'], data['diabetes'], data['income'],
                                            data['extraprimary'], data['bloodchem6'], data['education'], data['psych5'],
                                            data['psych6'], data['information'], data['cancer'])}


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5555)
